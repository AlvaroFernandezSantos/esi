Hola soy Alvaro puedo editar
Yo tambien ekisde
BEGIN main
	row <- askDimension("rows")
	col <- askDimension("columns")
	isEnd <- false
	B1 <- askBoats("1")
	B2 <- askBoats("2")

	WRITE ("Player 1")
	board1[][] <- generateBoard(row,col,B1,B2)

	WRITE ("Player 2")
	int board2[][] <- generateBoard(row,col,B1,B2)

	int visual1[][] <- generateVisual(length(board1),length(board2))
	int visual2[][] <- generateVisual(length(board1),length(board2))
	
	mainLoop(visual1, visual2, baord1, board2, isEnd, B1, B2)
END main


BEGIN mainLoop (visual1, visual2, board1, board2, isEnd, B1, B2)
	DO
		WRITE ("Turn for player 1, this is what you see")
		printVisual(visual2)
		visual2 <- attack(board2, visual2)
		printVisual(visual2)
		isEnd <- isTheEnd(visual2, 1, B1, B2)
	
		IF(isEnd = false) THEN
			WRITE ("Turn for player 2, this is what you see")
			printVisual(visual1)
			visual2 <- attack(board1, visual1)
			printVisual(visual1)
			isEnd <- isTheEnd(visual1, 2, B1, B2)
		ELSE
			isEnd <- true
		END_IF
	WHILE (isEnd = false)
END mainLoop


BEGIN askDimension(message)
	DO
		WRITE ("Introduce the number of " message ": ")
		READ dimension
	WHILE(dimension < 3)
	RETURN dimension
END askDimension


BEGIN askBoats(number)
	DO
		WRITE ("Introduce the number of boats of length " number ": ")
		READ boat
	WHILE(boat<0)
	RETURN boat
END askBoats


BEGIN generateBoard(row, col, b1, b2)
	a <- 0
	b <- 0
	lastRow <- row - 1
	lastCol <- col - 1
	typeOfBoat <- 1
	array[][] <- generateB1(row, col, b1, a, b, lastRow, lastCol, typeOfBoat)
	typeOfBoat <- 2
	array <- generateB2(array, row, col, b2, a, b, lastRow, lastCol, typeOfBoat)
	return array
END generateBoard


BEGIN generateB1(row, col, b1, b2, a, b, lastRow, lastCol, typeOfBoat)
	dimension array[row][col]
	FOR i <- 0 WHILE i<b1 INCREASE 1
		DO
			WRITE ("Introduce the row you want your B1 boat to be: [1," row "]")
			READ a
			WRITE ("Introduce the column you want your B1 boat to be: [1," col "]")
			READ b
		WHILE (a<1 OR a<row OR b<1 OR b>col)
		array[a][b]=1
	END_FOR
	return array
END generateB1


BEGIN generateB2(array, row, col, b1, b2, a, b, lastRow, lastCol, typeOfBoat)
	FOR i <- 0 WHILE i<b2 INCREASE 1
		DO
			WRITE ("Introduce the row you want your B2 boat to be: [1," row "]")
			READ a
			WRITE ("Introduce the column you want your B2 boat to be: [1," col "]")
			READ b
		WHILE (a<1 OR a<row OR b<1 OR b>col)
		array[a][b]=2
		printBoard(array)
		askForOtherPart(array, a, b)
	END_FOR
	return array
END generateB1


BEGIN askForOtherPart(array, a ,b)
	a <- a+1
	b <- b+1
	cantPutHere <- false
	DO
		DO
			WRITE ("Introduce the row of the other part of the boat")
			READ row2
			WRITE ("Introduce the column for the other part of the boat")
			READ col2
		WHILE ((col2<>b OR (row<>a+1 AND row2<>a-1)) AND (row2<>a OR (col2<>b+1 AND col2<>b-1)) AND (row2=a AND col2=b))
	row2 <- row2-1
	col2 <- col2-1
	cantPutHere <- canPutOtherPart(array,row2,col2,a,b,cantPutHere)
	IF(cantPutHere = true)
		WRITE ("You can't put it here")
	END_IF
	WHILE (cantPutHere = true)
	array[row2][col2]=2
	return array
END askForOtherPart


BEGIN canPutOtherPart(array,row2,col2,a,b,cantPutHere)
	a <- a-1
	b <- b-1
	IF (row2=a-1)
		cantPutHere <- otherPartAtTop(row2,col2,cantPutHere,array)
	END_IF
	IF (row2=a+1)
		cantPutHere <- otherPartAtBottom(row2,col2,cantPutHere,array)
	END_IF
	IF (col2=b-1)
		cantPutHere <- otherPartAtLeft(row2,col2,cantPutHere,array)
	END_IF
	IF (col2=b+1)
		cantPutHere <- otherPartAtRight(row2,col2,cantPutHere,array)
	END_IF
	return cantPutHere
END canPutOtherPart


BEGIN otherPartAtTop(row2,col2,cantPutHere,array)
	IF (array[row2-1][col2]=1 OR array[row2-1][col2]=2 OR array[row2-1][col2+1]=1 OR array[row2-1][col2+1]=2 OR array[row2-1][col2-1]=1 OR array[row2-1][col2-1]=2)
		cantPutHere <- true
	END_IF
	return cantPutHere
END otherPartAtTop
	

BEGIN otherPartAtBottom(row2,col2,cantPutHere,array)
	IF (array[row2+1][col2]=1 OR array[row2+1][col2]=2 OR array[row2+1][col2+1]=1 OR array[row2+1][col2+1]=2 OR array[row2+1][col2-1]=1 OR array[row2+1][col2-1]=2)
		cantPutHere <- true
	END_IF
	return cantPutHere
END otherPartAtBottom
	

BEGIN otherPartAtLeft(row2,col2,cantPutHere,array)
	IF (array[row2][col2-1]=1 OR array[row2][col2-1]=2 OR array[row2+1][col2-1]=1 OR array[row2+1][col2-1]=2 OR array[row2-1][col2-1]=1 OR array[row2-1][col2-1]=2)
		cantPutHere <- true
	END_IF
	return cantPutHere
END otherPartAtLeft
	

BEGIN otherPartAtRight(row2,col2,cantPutHere,array)
	IF (array[row2][col2+1]=1 OR array[row2][col2+1]=2 OR array[row2+1][col2+1]=1 OR array[row2+1][col2+1]=2 OR array[row2-1][col2+1]=1 OR array[row2-1][col2+1]=2) {
		cantPutHere <- true
	END_IF
	return cantPutHere
END otherPartAtRight


attack(board, visual)
Write (""Select the coordenates for your attack")
coorx <- askCoor(board,"X")-1
coorY <- askCoor(board,"Y")-1
IF(coorX>length(board)-2 OR coorY>length(board[0])-2 OR coorX<0 or coorY<0) THEN Write ("Those coordenatea re out of the map")
END_IF

checkPhrase(board,visual,coorY,coorX)

IF (board[coorY][coorX]=1) THEN visual[coorY][coorX]<-7
END IF 
IF (board[coorY][coorX]=2) THEN
visual[coorY][coorX]<-6
visual<-killTwo(visual,coorY,coorX)
END IF 
IF (board[coorY][coorX]=0) THEN visual[coorY][coorX]<-8
END IF 

return visual
END_Attack

CheckPhrase(board, visual, a, b)
BEGIN_CheckPhrase

IF(board[a][b]=1) THEN WRITE("Sunk")
END_IF

IF(board[a][b]=2) THEN WRITE("Hit")
END_IF

IF(board[a][b]=0) THEN WRITE("You missed")
END_IF

END_CheckPhrase

askCoor(board, message)
BEGIN_AskCoor
coor
DO 
WRITE("Introduce the" + message + "coordenates")
coor<- read
WHILE (coor>length(board) or coor<0)
return coor

END_AskCoor

killTwo(visual, a, b)
BEGIN_KillTwo
IF(a<>0) THEN visual<- killTwoUp(visual,a,b)
END_IF
IF(a<>length(visual)-1) THEN visual<-killTwoDown(visual, a, b)
END_IF
IF(b<>0) THEN visual<-killTwoLeft(visual, a, b)
END_IF
IF(b<>length(visual[a])-1) THEN visual<-killTwoRight(visual, a, b)
return visual 

END_KillTwo

killTwoUp(visual, a, b)
BEGIN KillTwoUp
IF(visual[a-1][b]=6) THEN visual<-[a-1][b]<-7
visual[a][b]<-7
WRITE("and sunk")
END_IF
return visual

END KillTwoUp

killTwoDown(visual, a, b)
BEGIN_KillTwoDown
IF(visual[a+1][b]=6) THEN visual[a+1][b]<-7
visual[a][b]<-7
WRITE("and sunk")
END_IF
return visual

END_KillTwoDown

killTwoLeft(visual, a, b)
BEGIN_KillTwoLeft
IF(visual[a][b-1]=6) THEN visual[a][b-1]<-7
visual[a][b]<-7
WRITE("and sunk")
END_IF
return visual

END_KillTwoLeft

killTwoRight(visual, a, b)
BEGIN_KillTwoRight
IF(visual[a][b+1]=6) THEN visual[a][b+1]<-7
visual[a][b]=7
WRITE("and sunk")
END_IF 
return visual

END_KillTwoRight


BEGIN isTheEnd (visual, player, B1, B2)
	isEnd <- false
	alive <- B1+(2*B2)
	sunk <- sunkBoats(visual)

	IF (alive = dead) THEN
		isEnd <- true
		WRITE("Player")+player+("wins")
	END_IF
	RETURN isEnd
END isTheEnd

BEGIN sunkBoats (visual)
	sunk <- 0
	FOR i <- 0 WHILE <length(visual) INCREASE 1
		FOR j <- 0 WHILE <length(visual(i)) INCREASE 1
			IF (visual[i][j] = 7) THEN
				sunk <- sunk + 1
			END_IF
		END_FOR
	END_FOR
	RETURN FOR
END sunkBoats
