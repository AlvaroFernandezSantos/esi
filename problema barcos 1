package boatsGame;
import java.util.Scanner;
public class Boats {

	final public static Scanner sc = new Scanner (System.in);
	
	public static void main(String[] args) {
		int row,col,B1,B2;
		row = askDimension("rows");
		col = askDimension("columns");
		B1 = askBoats("1");
		B2 = askBoats("2");
		System.out.println("Player 1");
		int board1[][]= generateBoard(row,col,B1,B2);
		System.out.println("Player 2");
		int board2[][]= generateBoard(row,col,B1,B2);
		
		//int visual1[][]= generateVisual(row,col);
		//int visual2[][]= generateVisual(row,col);
		int numRows = board1.length;
	}
	
	public static int askDimension(String message) {
		int dimension;
		do{
		System.out.println("Introduce the number of "+message+": ");
		dimension = sc.nextInt();
		}while(dimension<3);
		return dimension;
	}
	public static int askBoats(String number) {
		int boat;
		do{
		System.out.println("Introduce the number of boats of length "+number+": ");
		boat = sc.nextInt();
		}while(boat<=0);
		return boat;
	}

	
	public static int[][]generateBoard(int row,int col,int b1, int b2){
		
		//B1
		int a,b;
		int board[][]=new int[row][col];
		boolean isPossible = false;
		
		for(int i=0 ; i<b1 ; i++) {
			do {
				System.out.println("Introduce the row you want your B1 boat to be: [1,"+ row+"]");
				a = sc.nextInt();
				System.out.println("Introduce the column you want your B1 boat to be: [1,"+ col+"]");
				b = sc.nextInt();
			}while(a<1 || a>row || b<1 || b>col);
			isPossible = b1CheckPosition(board, a, b, isPossible);
			if(isPossible = true)
				board[a-1][b-1]=1;
			else {
				System.out.println("You can't put a boat here.It is contigous to another one");
				i--;
			}
		}
		
		//B2
		String direction, upOrDown, leftOrRight;
		for(int i=0;i<b2;i++) {
			do {
			System.out.println("Introduce the row you want your B2 boat to be: [1,"+ row+"]");
			a = sc.nextInt();
			}while(a<1 || a>row);
			do{
				System.out.println("Introduce the column you want your B2 boat to be: [1,"+ col+"]");
				b = sc.nextInt();
			}while(b<1 || b>col);
			
			
			if((board[a-1][b-2])==1 || (board[a-1][b])==1 || (board[a-2][b-1])==1 || (board[a][b-1])==1) {
				System.out.println("You can't put a boat here. It is contigous to another one");
				i--;
			}
			else {
			board[a-1][b-1]=2;
			
			
			do {
			System.out.println("Do you want to place it vertically (v) or horizontaly (h)? ");
			direction = sc.next();
			}while(!direction.equalsIgnoreCase("v") && !direction.equalsIgnoreCase("h"));
			if(direction.equalsIgnoreCase("v")) {   //Vertical
				if(a==1) {
					board[a][b-1]=2;
				}else if(a==row) {
					board[a-2][b-1]=2;
				}else {
					do {
						System.out.println("Do you want it upwards (u) or downwards (d)?");
						upOrDown = sc.next();
					}while(!upOrDown.equalsIgnoreCase("u") && !upOrDown.equalsIgnoreCase("d"));
					if(upOrDown.equalsIgnoreCase("u")) {
						if((board[a-2][b-2])==1 || (board[a-2][b])==1) {
							System.out.println("You can't put a boat here. It is contigous to another one");
							i--;
						}
						else {
						board[a-2][b-1]=2;
						}
					}else{
						if((board[a][b-2])==1 || (board[a][b])==1 || (board[a+1][b-1])==1 || (board[a-2][b-1])==1) {
							System.out.println("You can't put a boat here. It is contigous to another one");
							i--;
						}
						else {
						board[a][b-1]=2;
						}

					}
				}
			}else { 			//Horizontal
				if(b==1) {
					board[a-1][b]=2;
				}else if(b==col) {
					board[a-1][b-2]=2;
				}else {
				do {
					System.out.println("Do you want it rightwards (r) or leftwards (l)?");
					leftOrRight = sc.next();
					}while(!leftOrRight.equalsIgnoreCase("r") && !leftOrRight.equalsIgnoreCase("l"));
					if(leftOrRight.equalsIgnoreCase("r")) {
						if((board[a-2][b])==1 || (board[a][b])==1 || (board[a][b+1])==1) {
							System.out.println("You can't put a boat here. It is contigous to another one");
							i--;
						}
						else {
						board[a-1][b]=2;
						}

					}else{
						if((board[a-2][b-2])==1 || (board[a][b-2])==1 || (board[a][b-3])==1) {
							System.out.println("You can't put a boat here. It is contigous to another one");
							i--;
						}
						else {
						board[a-1][b-2]=2;
						}

					}
				}
			}

		}
		}
		
		//We print the board
		for(int i=0;i<board.length;i++) {
			for(int j=0;j<board[i].length;j++) {
				if(board[i][j]==1) {
				System.out.print(1);
				}else if (board[i][j]==2)
					System.out.print(2);
				else {
					System.out.print("0");
				}
			}
			System.out.println();
		}
		return board;
	}
	private static boolean b1CheckPosition(int[][] array, int a, int b, boolean isPossible) {
		int col = array[0].length;
		int row = array.length;
		
		//CHECK TOP LEFT
		if(a==1 && b==1) 
			isPossible = checkTopLeft(array, a, b, isPossible);
		
		//CHECK FIRST ROW
		if(a==1 && (b!=1 && b!=col))
			isPossible = checkFirstRow(array, a, b, isPossible);
		
		//CHECK BOTTOM LEFT
		if(a==row && b==1)
			isPossible = checkBottomLeft(array, a, b, isPossible);
		
		//CHECK LAST ROW
		if(a==row && (b!=1 && b!=col))
			isPossible = checkLastRow(array, a, b, isPossible);
		
		//CHECK TOP RIGHT
		if(a==1 && b==col)
			isPossible = checkTopRight(array, a, b, isPossible);
		
		//CHECK BOTTOM RIGHT
		if(a==row && b==col)
			isPossible = checkBottomRight(array, a ,b, isPossible);
		
		//CHECK FIRST COLUMN
		if((a!=1 && a!=row) && b==1)
			isPossible = checkFirstColumn(array, a, b, isPossible);
		
		//CHECK LAST COLUMN
		if((a!=1 && a!=row) && b==col)
			isPossible = checkLastColumn(array, a, b, isPossible);
		
		//CHECK INSIDE
		if(a>1 && a<row && b>1 && b<col)
			isPossible = checkInside(array, a, b, isPossible);
		return isPossible;
	}

	private static boolean checkInside(int[][] array, int a, int b, boolean isPossible) {

		if(array[a-1][b-2]==0 && array[a-1][b]==0 && array[a-2][b-1]==0 && array[a][b-1]==0)
			isPossible = true;
		return isPossible;
	}

	private static boolean checkLastColumn(int[][] array, int a, int b, boolean isPossible) {

		if(array[a-1][b-2]==0 && array[a-2][b-1]==0 && array[a][b-1]==0)
			isPossible = true;
		return isPossible;
	}

	private static boolean checkFirstColumn(int[][] array, int a, int b, boolean isPossible) {

		if(array[a-1][b]==0 && array[a-2][b-1]==0 && array[a][b-1]==0)
			isPossible = true;
		return isPossible;
	}

	private static boolean checkBottomRight(int[][] array, int a, int b, boolean isPossible) {

		if(array[a-1][b-2]==0 && array[a-2][b-1]==0)
			isPossible = true;
		return isPossible;
	}

	private static boolean checkTopRight(int[][] array, int a, int b, boolean isPossible) {

		if(array[a-1][b-2]==0 && array[a-2][b-1]==0)
			isPossible = true;
		return isPossible;
	}

	private static boolean checkLastRow(int[][] array, int a, int b, boolean isPossible) {

		if(array[a-2][b-1]==0 && array[a-1][b-2]==0 && array[a-1][b]==0)
			isPossible = true;
		return isPossible;
	}

	private static boolean checkBottomLeft(int[][] array, int a, int b, boolean isPossible) {

		if(array[a-2][b-1]==0 && array[a-1][b]==0)
			isPossible = true;
		return isPossible;
	}

	private static boolean checkFirstRow(int[][] array, int a, int b, boolean isPossible) {

		if(array[a][b-1]==0 && array[a-1][b-2]==0 && array[a-1][b]==0) 
			isPossible = true;
		return isPossible;
	}

	private static boolean checkTopLeft(int[][] array, int a, int b, boolean isPossible) {

		if(array[a][b-1]==0 && array[a-1][b]==0) 
			isPossible=true;
		return isPossible;
	}
}
